import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream
import javax.xml.parsers.DocumentBuilderFactory
import org.xml.sax.SAXException


plugins {
    id 'java'
    id 'war'
}

ext {
    hibernateVersion = '6.4.4.Final'
    postgresqlVersion = '42.7.3'
    jwtVersion = '4.4.0'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

System.setProperty("webdriver.chrome.driver", "chromedriver.exe");


dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')

    testImplementation 'org.seleniumhq.selenium:selenium-java:4.21.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'

    implementation 'jakarta.platform:jakarta.jakartaee-api:10.0.0'

    implementation "org.hibernate.orm:hibernate-core:${hibernateVersion}"

    implementation "org.postgresql:postgresql:${postgresqlVersion}"

    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.2'

    implementation "com.auth0:java-jwt:${jwtVersion}"

    implementation 'jakarta.json.bind:jakarta.json.bind-api:3.0.0'
}

test {
    useJUnitPlatform()
}

def music = file("src/main/resources/mp3/meow.mp3")
def dirWithLoc = file("src/main/resources/loc")
def warFile = file("$buildDir/libs/ThirdlabOPI-1.0-SNAPSHOT.war")
def wildFly = file("wildfly")

tasks.register('labCompile', JavaCompile){
    group = "lab"
    source = sourceSets.main.java
    classpath = sourceSets.main.compileClasspath
    destinationDirectory = file("classes/java")
}

tasks.register("labBuild", Jar){
    group = "lab"
    dependsOn("classes")
    destinationDirectory.set(file("/artifacts"))
    from{
        sourceSets.main.output
        configurations.runtimeClasspath.collect {if (it.isDirectory()) it else zipTree(it)}
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
tasks.register("labWar") {
    group = "lab"
    dependsOn tasks.war
}

tasks.register("labRunWildFly") {
    group = "lab"

    dependsOn "labWar"

    doLast {
        def deployDir = new File(wildFly, "standalone/deployments")

        if (!warFile.exists()) {
            throw new GradleException("WAR-файл не найден!")
        }

        copy {
            from warFile
            into deployDir
        }

        def script = new File(wildFly, "bin/standalone.bat")

        exec {
            commandLine "cmd", "/c", script.absolutePath
            standardInput = System.in
            standardOutput = System.out
            errorOutput = System.err
            ignoreExitValue = true
        }
    }
}


tasks.register("labClean", Delete){
    group = "lab"
    delete rootProject.buildDir
    delete file("/artifacts")
}

tasks.register("labLocaleToASCII") {
    group = "lab"
    fileTree(dirWithLoc).matching { include '**/*.properties' }.each { File file ->
        def asciiText = file.getText("UTF-8").toCharArray().collect {
            (it as int) > 127 ? String.format("\\u%04x", (int) it) : it
        }.join("")
        file.text = asciiText
        println "Converted: ${file.name}"
    }
}

tasks.register("labMusic") {
    group = "lab"
    dependsOn(labBuild)
    ["cmd", "/c", "start", "wmplayer", music].execute()
}


tasks.register("labXml") {
    group = "lab"

    def factory = DocumentBuilderFactory.newInstance()
    def builder = factory.newDocumentBuilder()
    def error = false

    def xmlFiles = fileTree(projectDir) {
        include '**/*.xml'
    }

    if (!xmlFiles.empty) {
        xmlFiles.each { file ->
            try {
                builder.parse(file)
            } catch (SAXException | IOException e) {
                error = true
                println "Ошибка в файле ${file}: ${e.message}"
            }
        }
    }
    if (!error) {
        println "\nВсе XML-файлы валидны."
    }
}

tasks.register("labScp"){
    group = "lab"
    dependsOn(labBuild)
    doLast {
        def jarFile = file("artifacts/ThirdlabOPI-1.0-SNAPSHOT.jar")

        if (!jarFile.exists()) {
            throw new GradleException("JAR-файл не найден")
        }

        def command = ["scp", "-P", "2222", jarFile.absolutePath, "s413818@se.ifmo.ru:~/"]
        println "Ожидаем отклика сервера."

        def process = new ProcessBuilder(command)
                .inheritIO()
                .start()

        def exitCode = process.waitFor()

        if (exitCode != 0) {
            throw new GradleException("Ошибка SCP, код возврата: $exitCode")
        }
    }
}

tasks.register("labEnv") {
    group = "lab"

    def javaVersion = "17"
    def jvmArgs = ["-XX:MaxHeapSize=1G", "-XX:MaxMetaspaceSize=128m"]
    def javaHomeEnv = System.getenv("JAVA_HOME_${javaVersion}") ?: System.getenv("JAVA_HOME")

    dependsOn(labBuild)

    doLast {
        if (javaHomeEnv == null) {
            throw new GradleException("JAVA_HOME_${javaVersion} не установлена в переменных окружения.")
        }

        def javaExecutable = "${javaHomeEnv}${File.separator}bin${File.separator}java"

        def command = [javaExecutable] + jvmArgs + ["-jar", jarFile.absolutePath]

        println "Запускаем команду: ${command.join(' ')}"

        def process = new ProcessBuilder(command as String[])
                .inheritIO()
                .start()

        def exitCode = process.waitFor()

        if (exitCode != 0) {
            println "Процесс завершился с кодом: ${exitCode}"
        }
    }
}

tasks.register("labDiff") {
    group = "lab"

        def classes = "PointService UserService Point User".split(" ") as List

        boolean hasChanges = false

        classes.each { className ->
            def cmd = ["git", "diff", "--", "src/**/" + className]
            def p = cmd.execute()
            def output = p.inputStream.text
            p.waitFor()

            if (output.trim()) {
                println "Изменения ${className}:\n$output"
                hasChanges = true
            }
        }

        if (hasChanges) {
            def commitCmd = ["git", "commit", "--allow-empty", "-m", "diff command commit"]
            def commitProc = new ProcessBuilder(commitCmd)
                    .inheritIO()
                    .start()
            commitProc.waitFor()
        } else {
            println "Нет изменений"
        }

}

tasks.register("labReport") {
    group = "lab"

    dependsOn(test)

    doLast {
        def srcDir = file("$buildDir/test-results/test")
        def destDir = file("$buildDir/reports/test-results")

        delete destDir
        mkdir destDir

        copy {
            from srcDir
            into destDir
            include "**/*.xml"
        }


        if (file(".git").exists()) {
            def gitAdd = ["git", "add", "build/reports/test-results"].execute()
            gitAdd.waitFor()

            def gitCommit = ["git", "commit", "-m", "Automatic test report update"].execute()
            def commitExit = gitCommit.waitFor()

            if (commitExit != 0) {
                println "Нет изменений"
            }
        }
    }
}

tasks.register("labAlt") {
    group = "lab"

    def replacements = [
            "Point": "dot",
            "User": "client",
            "PointService": "helper",
            "JwtUtil": "jjjjwwwtttt",
            "PasswordHasher": "kriptography",
            "AreaChecker": "diffMath",

            "org/example": "alt/example",
            "ejb": "altEjb",
            "entity": "altEntity",
            "exception": "altException"
    ]

    dependsOn(labBuild)

    doLast {
        def tempSrcDir = file("${buildDir}/alt-src")
        delete tempSrcDir

        copy {
            from "src/main/java"
            into tempSrcDir
            eachFile { file ->
                def newPath = file.path
                replacements.each { original, replacement ->
                    newPath = newPath.replace(original, replacement)
                }
                file.path = newPath
            }
            includeEmptyDirs = false
        }

        fileTree(tempSrcDir).each { file ->
            if (file.isFile() && file.name.endsWith('.java')) {
                def content = file.text
                replacements.each { original, replacement ->
                    if (original.contains('/')) {
                        content = content.replace(original.replace('/', '.'), replacement.replace('/', '.'))
                    }
                    else {
                        content = content.replaceAll(/\b${original}\b/, replacement)
                    }
                }
                file.text = content
            }
        }
    }
}

tasks.register("labHistory") {
    group = "lab"

    doLast {
        def revisions = "git rev-list HEAD".execute().text.readLines()
        def lastWorkingRevision = null

        for (String revision in revisions) {
            println "Проверяем ревизию: ${revision.substring(0, 7)}..."

            def checkoutStatus = ["git", "checkout", revision].execute().waitFor()
            if (checkoutStatus != 0) {
                println "Ошибка переключения на ревизию ${revision.substring(0, 7)}"
                continue
            }

            try {
                def compileResult = "cmd /c gradlew.bat labBuild".execute()
                def compileStatus = compileResult.waitFor()

                if (compileStatus == 0) {
                    lastWorkingRevision = revision
                    println "Ревизия ${revision.substring(0, 7)} успешно скомпилирована"
                    break
                } else {
                    throw new GradleException(compileResult.errorStream.text)
                }
            } catch (Exception e) {
                println "Ошибка компиляции: ${e.message}"
            }
        }


        def nextRevision = revisions[revisions.indexOf(lastWorkingRevision) - 1]

        def diffText = ["git", "diff", lastWorkingRevision, nextRevision].execute().text


        def diffFile = file("props/history/history.diff")
        diffFile.parentFile.mkdirs()
        diffFile.text = diffText

        println "Последняя рабочая ревизия: ${lastWorkingRevision.substring(0, 7)}"
        println "Первая неработающая ревизия: ${nextRevision.substring(0, 7)}"
        println "Diff сохранен в: ${diffFile.absolutePath}"
    }
}

tasks.register("labTeam") {
    group = "lab"

    dependsOn("labClean")

    doLast {
        buildDir.mkdirs()

        def revisions = "git rev-list --max-count=4 HEAD".execute().text.readLines()
        if (revisions.empty) {
            throw new GradleException("Не найдено ревизий в репозитории")
        }

        def zipFile = file("$buildDir/versions.zip")
        zipFile.parentFile.mkdirs()

        def currentBranch = "git rev-parse --abbrev-ref HEAD".execute().text.trim()

        try {
            new ZipOutputStream(new FileOutputStream(zipFile)).withStream { zipStream ->
                revisions.each { rev ->
                    try {
                        println "Обрабатываем ревизию: ${rev.substring(0, 7)}"

                        def checkout = ["git", "checkout", rev].execute()
                        checkout.waitFor()

                        def buildResult = ["cmd", "/c", "gradlew.bat", "labBuild"].execute()
                        buildResult.waitFor()

                        def jarFile = file("artifacts/ThirdlabOPI-1.0-SNAPSHOT.jar")
                        if (!jarFile.exists()) {
                            throw new GradleException("JAR файл не найден: ${jarFile.absolutePath}")
                        }

                        def entry = new ZipEntry("build-${rev.substring(0, 7)}.jar")
                        zipStream.putNextEntry(entry)
                        zipStream.write(jarFile.bytes)
                        zipStream.closeEntry()

                        println "Добавлено: ${entry.name}"

                    } catch (Exception e) {
                        println "Ошибка ${rev.substring(0, 7)}: ${e.message}"
                    }
                }
            }

            println "\nZIP-архив успешно создан: ${zipFile.absolutePath}"

        } finally {
            ["git", "checkout", currentBranch].execute().waitFor()
            println "Возврат на ветку: $currentBranch"
        }
    }
}